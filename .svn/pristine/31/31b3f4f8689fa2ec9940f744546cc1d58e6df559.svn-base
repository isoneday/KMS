<?php

/**
 * @author GTFW CRUD Generator 
 */
class StructPositionType extends Database {

    public function __construct($connectionNumber = 0) {
        parent::__construct($connectionNumber);
        $this->LoadSql('module/ref.structural.position.type/business/mysqlt/structpositiontype.sql.php');
        $this->SetDebugOn();
    }

    public function countType($filter) {       
        $query = $this->mSqlQueries['count_type'];        
        $result = $this->Open($query, array());
        return $result[0]['total'];
    }

    public function getType($filter) {
        if (is_array($filter))
            extract($filter);
        $str = '';

        if (!empty($parent_id)) {
            $str .= " AND LOWER(a.strucpostype_parent_id) = ('$parent_id') OR (a.strucpostype_id) = ('$parent_id')";
        }
        if (!empty($code)) {
            $str .= " AND LOWER(a.strucpostype_code) LIKE('%$code%')";
        }
        if (!empty($name)) {
            $str .= " AND LOWER(a.strucpostype_name) LIKE('%$name%')";
        }
        $limit = '';
        if (!empty($display)) {
            $limit = "LIMIT $start, $display";
        }
        $query = $this->mSqlQueries['get_type'];
        $query = str_replace('--search--', $str, $query);
        $query = str_replace('--limit--', $limit, $query);
        $result = $this->Open(stripslashes($query), array());
        return $result;
    }

    public function getDetailType($id) {
        $result = $this->Open($this->mSqlQueries['get_detail_type'], array($id));
        if ($result) {
            return $result[0];
        }
    }

    function getTypeByParent($items, $root_id = 0) {
        $this->html = array();
        $this->items = $items;

        foreach ($this->items as $item)
            $children[$item['parent_id']][] = $item;

        // loop will be false if the root has no children (i.e., an empty menu!)
        $loop = !empty($children[$root_id]);

        // initializing $parent as the root
        $parent = $root_id;
        $parent_stack = array();

        while ($loop && (($option = each($children[$parent])) || ($parent > $root_id))) {
            if ($option === false) {
                $parent = array_pop($parent_stack);
            } elseif (!empty($children[$option['value']['id']])) {
                $tab = str_repeat("&nbsp;&nbsp;", (count($parent_stack) + 1) * 2 - 2);

                // menu item containing childrens (open)
                $this->html[] = array(
                    'id' => $option['value']['id'],
                    'name' => $tab . $option['value']['name']
                );

                array_push($parent_stack, $option['value']['parent_id']);
                $parent = $option['value']['id'];
            } else {
                $tab = str_repeat("&nbsp;&nbsp;", (count($parent_stack) + 1) * 2 - 2);
                // menu item with no children (aka "leaf")

                $this->html[] = array(
                    'id' => $option['value']['id'],
                    'name' => $tab . $option['value']['name']
                );
            }
        }
        return $this->html;
    }

    public function insertType($params) {
        return $this->Execute($this->mSqlQueries['insert_type'], $params);
    }

    public function updateType($params) {
        return $this->Execute($this->mSqlQueries['update_type'], $params);
    }

    public function deleteType($id) {
        return $this->Execute($this->mSqlQueries['delete_type'], array($id));
    }

    public function listType() {
        $result = $this->Open($this->mSqlQueries['list_type'], array());
        if (!empty($result)) {
            return $this->getTypeByParent($result);
        }
    }

    /**
     * check name if exist
     * @param array of name, id
     * @return boolean, true if exist, false otherwise
    */
    public function checkName($param) {
        if (is_array($param))
            extract($param);

        $str = '';
        $limit = '';

        if (!empty($code))
            $str .= " AND LOWER(a.strucpostype_code) = LOWER('$code')";
        if (!empty($name))
            $str .= " AND LOWER(a.strucpostype_name) = LOWER('$name')";
        if (!empty($id))
            $str .= " AND a.strucpostype_id != $id";

        $query = $this->mSqlQueries['get_type'];
		//print_r($query);exit;
        $query = str_replace('--search--', $str, $query);
        $query = str_replace('--limit--', $limit, $query);
        $result = $this->Open(stripslashes($query), array());

        if (!empty($result)) {
            return true;
        } else {
            return false;
        }
    }
}
// End of file Type.class.php